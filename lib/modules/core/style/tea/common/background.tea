@ global.background = type_mixin();

.background.default(bg) {
    background: @color(bg ? bg.color : 'transparent');
}
@ background.color = background.default;

.background.gradient(bg) {
    .gradient.vertical(color(bg.color),color(bg.color_2));
}

.background.gradientTop(bg) {
    background: @bg.color;
    @ gradient.stops([ [0,color(bg.shadow_color)],[bg.gradientSize,color(bg.color)] ]);
}

.background.fullSize(bg) {
    background: url(@bg.texture) 50% 0%;
}

.background.pattern(bg,path) {
    @{
        var test = {};
        for (var key in bg) test[key] = bg[key];
        test.color_1 = teacss.functions.color_1;
        test.color_2 = teacss.functions.color_2;
        test.color_3 = teacss.functions.color_3;
        
        if (teacss.cache(test) && !teacss.building) return;
        if (!bg.pattern) return background.color(bg);
        
        var canvas = new Canvas(bg.pattern);
        var gl = canvas.gl;
        gl["patternShader"] = gl["patternShader"] || new Shader(gl,null,[
            'uniform sampler2D tex0;',
            'uniform vec4 c1,c2;',
            'uniform float transparency;',
            'varying vec2 texCoord;',
            'void main() {',
                'vec4 tex = texture2D(tex0, texCoord);',
                'vec4 c3 = c1 * (1.0 - tex.r * (1.0-transparency)) + c2 * tex.r * (1.0-transparency);',
                'gl_FragColor = c3;',
            '}'        
        ].join('\n'));
        
        var col = teacss.Color.parse(color(bg.color));
        col = [col.rgb[0]/255,col.rgb[1]/255,col.rgb[2]/255,col.alpha];

        var col2 = teacss.Color.parse(color(bg.color_2));
        col2 = [col2.rgb[0]/255,col2.rgb[1]/255,col2.rgb[2]/255,col2.alpha];
        
        var transparency = bg.transparency ? Number(bg.transparency)/100.0 : 0; 
        
        canvas.draw3D(gl["patternShader"],{tex0:canvas.getTexture()},{
            c1: col,
            c2: col2,
            transparency:  transparency
        });
        canvas.setState('texture');
        canvas.background(path);
    }
}
